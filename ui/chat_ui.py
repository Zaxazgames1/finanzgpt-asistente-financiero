import streamlit as st
import re
import random
import time

class ChatUI:
    """
    Clase para manejar la interfaz de usuario del chat.
    """
    def __init__(self, nlp_service, formatters):
        """
        Inicializa la interfaz de chat.
        
        Args:
            nlp_service (NLPService): Servicio de procesamiento de lenguaje natural
            formatters (Formatters): Utilidades de formato
        """
        self.nlp_service = nlp_service
        self.formatters = formatters
        
        # Inicializar historial de chat si no existe
        if 'chat_history' not in st.session_state:
            st.session_state.chat_history = []
        
        if 'thinking' not in st.session_state:
            st.session_state.thinking = False
    
    def mostrar_procesamiento(self):
        """Muestra una animaci√≥n de procesamiento estilo ChatGPT"""
        with st.spinner(''):
            st.markdown("""
            <div class="thinking-animation">
                <div class="thinking-dot"></div>
                <div class="thinking-dot"></div>
                <div class="thinking-dot"></div>
            </div>
            """, unsafe_allow_html=True)
            
            # Simulaci√≥n de procesamiento
            time.sleep(2)
            
            # Mostrar mensaje de √©xito al completar
            st.success('An√°lisis completado')
            time.sleep(0.5)
    
    def responder_mensaje_no_financiero(self, tipo):
        """
        Genera respuestas para mensajes que no son de √≠ndole financiera.
        
        Args:
            tipo (str): Tipo de mensaje no financiero
            
        Returns:
            str: Respuesta apropiada
        """
        if tipo == "saludo":
            saludos = [
                "üëã ¬°Hola! Soy FinanzGPT, tu asistente financiero empresarial. ¬øEn qu√© puedo ayudarte hoy con respecto a tus finanzas?",
                "¬°Hola! Estoy aqu√≠ para ayudarte con el an√°lisis financiero de tu empresa. ¬øQu√© te gustar√≠a saber?",
                "¬°Saludos! Soy tu asistente especializado en an√°lisis financiero empresarial. ¬øTienes alguna consulta sobre tus indicadores financieros?"
            ]
            return random.choice(saludos)
        
        elif tipo == "despedida":
            despedidas = [
                "¬°Hasta pronto! Recuerda revisar peri√≥dicamente tus indicadores financieros para mantener el control de tu empresa.",
                "¬°Adi√≥s! Si tienes m√°s preguntas sobre finanzas empresariales en el futuro, estar√© aqu√≠ para ayudarte.",
                "¬°Que tengas un buen d√≠a! Estar√© disponible cuando necesites m√°s an√°lisis financieros para tu empresa."
            ]
            return random.choice(despedidas)
        
        elif tipo == "emocion" or tipo == "personal":
            respuestas = [
                "Como asistente financiero, estoy dise√±ado para ayudarte con indicadores y an√°lisis econ√≥micos de tu empresa. ¬øTe gustar√≠a que analiz√°ramos alg√∫n aspecto financiero espec√≠fico?",
                "Mi especialidad es el an√°lisis financiero empresarial. ¬øPuedo ayudarte con alguna consulta sobre tus indicadores econ√≥micos?",
                "Estoy programado para asistirte en temas financieros empresariales. ¬øHay alg√∫n aspecto financiero de tu empresa sobre el que quieras informaci√≥n?"
            ]
            return random.choice(respuestas)
        
        elif tipo == "ayuda":
            # Mostrar men√∫ de opciones de ayuda
            respuesta = """### üîç ¬øEn qu√© puedo ayudarte?

Soy FinanzGPT, tu asistente especializado en an√°lisis financiero empresarial. Puedo ayudarte con:

1. **An√°lisis de endeudamiento**: Evaluaci√≥n de tu ratio de deuda y recomendaciones para optimizarlo
2. **An√°lisis de rentabilidad**: Evaluaci√≥n de tu ROA y estrategias para mejorar tus beneficios
3. **An√°lisis de productividad**: Evaluaci√≥n del rendimiento por empleado y consejos para aumentarlo
4. **An√°lisis de rotaci√≥n de cartera**: Evaluaci√≥n de tu ciclo de cobro y m√©todos para acelerarlo
5. **An√°lisis de liquidez**: Evaluaci√≥n de tu capacidad para cubrir obligaciones a corto plazo
6. **Resumen general financiero**: Visi√≥n global de todos tus indicadores financieros

Para consultar, simplemente pregunta por ejemplo: *"¬øC√≥mo est√° mi endeudamiento?"* o *"¬øQu√© puedo hacer para mejorar mi rentabilidad?"*"""
            return respuesta
        
        elif tipo == "corto" or tipo == "otro":
            respuestas = [
                "Soy un asistente especializado en an√°lisis financiero empresarial. ¬øPuedo ayudarte con alguna consulta sobre indicadores financieros de tu empresa?",
                "Estoy aqu√≠ para ayudarte con an√°lisis econ√≥mico y financiero. ¬øQu√© indicador financiero te gustar√≠a analizar?",
                "Como asistente financiero, puedo ayudarte a interpretar tus indicadores y darte recomendaciones para mejorar la salud econ√≥mica de tu empresa. ¬øQu√© aspecto te interesa analizar?"
            ]
            return random.choice(respuestas)
    
    def chatbot_response(self, mensaje, datos_empresa=None):
        """
        Genera respuestas del chatbot basadas en el mensaje del usuario y los datos de la empresa.
        
        Args:
            mensaje (str): Mensaje del usuario
            datos_empresa (dict, optional): Datos de la empresa
            
        Returns:
            str: Respuesta del chatbot
        """
        # Verificar si es un mensaje no financiero
        es_no_financiero, tipo = self.nlp_service.es_mensaje_no_financiero(mensaje)
        
        if es_no_financiero:
            return self.responder_mensaje_no_financiero(tipo)
        
        # Si el mensaje es financiero, continuar con el an√°lisis normal
        # Aplicar NLP al mensaje
        tokens = self.nlp_service.tokenizar_texto(mensaje)
        lemas = self.nlp_service.lematizar_texto(mensaje)
        pos_tags = self.nlp_service.pos_tagging(mensaje)
        keywords = self.nlp_service.extraer_keywords(mensaje, 3)
        
        # Mensajes predefinidos para diferentes situaciones
        mensajes_predefinidos = {
            'endeudamiento': [
                "El ratio de endeudamiento muestra qu√© proporci√≥n de tus activos est√° financiada por deuda. Un valor menor generalmente indica una situaci√≥n m√°s s√≥lida, aunque depende del sector.\n\nTe invito a consultar este indicador espec√≠fico para tu empresa escribiendo '¬øC√≥mo est√° mi endeudamiento?'",
                "Para mejorar tu ratio de endeudamiento, podr√≠as:\n‚Ä¢ Aumentar el capital social\n‚Ä¢ Reinvertir beneficios\n‚Ä¢ Vender activos no productivos para reducir deuda\n‚Ä¢ Renegociar plazos de pago.\n\nSi quieres un an√°lisis m√°s detallado de tu situaci√≥n, preg√∫ntame directamente.",
                "Es importante comparar tu ratio de endeudamiento con empresas similares del sector. Cada industria tiene sus particularidades y lo que es alto en un sector puede ser normal en otro.\n\nPuedo analizar la situaci√≥n espec√≠fica de tu empresa si me preguntas sobre tu nivel de endeudamiento."
            ],
            'rentabilidad': [
                "La rentabilidad sobre activos (ROA) indica cu√°nto beneficio generas por cada peso invertido en activos. Un ROA m√°s alto significa que est√°s aprovechando mejor tus recursos.\n\nPara conocer c√≥mo est√° tu rentabilidad, simplemente preg√∫ntame '¬øC√≥mo es mi rentabilidad?'",
                "Para mejorar tu rentabilidad podr√≠as:\n‚Ä¢ Aumentar precios si el mercado lo permite\n‚Ä¢ Reducir costos operativos\n‚Ä¢ Optimizar la gesti√≥n de inventarios\n‚Ä¢ Deshacerte de activos poco productivos.\n\nPreg√∫ntame por un an√°lisis espec√≠fico para tu empresa.",
                "Tu ROA debe compararse con la media del sector. Si est√° por debajo, podr√≠a ser momento de replantearse la estrategia de negocio o buscar nuevas oportunidades de mercado.\n\nPuedo darte una evaluaci√≥n personalizada si me preguntas directamente."
            ],
            'productividad': [
                "La productividad por empleado muestra cu√°nto genera cada trabajador en t√©rminos de ingresos. Es un indicador clave de la eficiencia operativa.\n\nSi quieres saber c√≥mo est√° la productividad en tu empresa, preg√∫ntame directamente.",
                "Para mejorar la productividad podr√≠as:\n‚Ä¢ Invertir en capacitaci√≥n\n‚Ä¢ Mejorar procesos y tecnolog√≠a\n‚Ä¢ Implementar sistemas de incentivos basados en resultados\n‚Ä¢ Revisar la distribuci√≥n de tareas.\n\nConsulta el estado de tu empresa pregunt√°ndome por tu nivel de productividad.",
                "Una baja productividad puede indicar exceso de personal, falta de tecnolog√≠a adecuada, o procesos ineficientes. An√°lisis m√°s profundos te ayudar√°n a identificar los cuellos de botella.\n\nPreg√∫ntame directamente por tu productividad para un an√°lisis espec√≠fico."
            ],
            'cartera': [
                "La rotaci√≥n de cartera indica cu√°ntos d√≠as tardas en cobrar tus ventas a cr√©dito. Una rotaci√≥n m√°s baja es generalmente mejor, ya que mejora tu liquidez.\n\nPara saber c√≥mo est√° tu rotaci√≥n de cartera, puedes preguntarme directamente.",
                "Para mejorar tu rotaci√≥n de cartera, considera:\n‚Ä¢ Revisar pol√≠ticas de cr√©dito\n‚Ä¢ Implementar descuentos por pronto pago\n‚Ä¢ Mejorar el seguimiento de cobros\n‚Ä¢ Evaluar factoring para cuentas problem√°ticas.\n\nPreg√∫ntame espec√≠ficamente por tu rotaci√≥n de cartera para un an√°lisis personalizado.",
                "Una cartera que rota lentamente puede generar problemas de liquidez. Es importante balancear las pol√≠ticas de cr√©dito para no perder clientes pero tampoco arriesgar tu flujo de caja.\n\nSi quieres saber c√≥mo est√° tu rotaci√≥n de cartera, solo preg√∫ntame."
            ],
            'liquidez': [
                "La liquidez se refiere a la capacidad de tu empresa para cumplir con sus obligaciones a corto plazo. Con los datos proporcionados, puedo hacer una estimaci√≥n b√°sica.\n\nSi quieres saber m√°s sobre tu liquidez, preg√∫ntame directamente.",
                "Un buen ratio de liquidez suele estar entre 1.5 y 2.0, indicando que puedes cubrir tus deudas a corto plazo sin problemas.\n\nPara un an√°lisis espec√≠fico de tu empresa, preg√∫ntame por tu liquidez.",
                "Si tienes problemas de liquidez, podr√≠as:\n‚Ä¢ Mejorar la gesti√≥n de cobros\n‚Ä¢ Renegociar plazos con proveedores\n‚Ä¢ Establecer l√≠neas de cr√©dito\n‚Ä¢ Revisar tu ciclo de conversi√≥n de efectivo.\n\nConsulta tu situaci√≥n pregunt√°ndome directamente."
            ],
            'general': [
                "Bas√°ndome en los datos proporcionados, puedo analizar varios aspectos financieros de tu empresa. ¬øHay alg√∫n indicador espec√≠fico que te interese conocer m√°s a fondo?",
                "¬øSab√≠as que el an√°lisis financiero debe ser peri√≥dico? Te recomiendo revisar estos indicadores al menos trimestralmente para detectar tendencias y actuar a tiempo.",
                "Recuerda que cada sector tiene sus propios est√°ndares para los indicadores financieros. Lo importante es identificar tendencias y compararte con empresas similares."
            ]
        }
        
        # Verificar el tipo de mensaje usando NLP
        # Enfoque mejorado analizando palabras clave y contexto
        if any(palabra in mensaje.lower() for palabra in ['deuda', 'endeudamiento', 'pasivo', 'prestamo', 'financiacion', 'apalancamiento']):
            categoria = 'endeudamiento'
        elif any(palabra in mensaje.lower() for palabra in ['rentabilidad', 'ganancia', 'beneficio', 'rendimiento', 'roa', 'margen','utilidad']):
            categoria = 'rentabilidad'
        elif any(palabra in mensaje.lower() for palabra in ['productividad', 'eficiencia', 'empleado', 'trabajador', 'personal', 'rendimiento']):
            categoria = 'productividad'
        elif any(palabra in mensaje.lower() for palabra in ['cartera', 'cobrar', 'credito', 'rotacion', 'cliente', 'factura', 'cobranza']):
            categoria = 'cartera'
        elif any(palabra in mensaje.lower() for palabra in ['liquidez', 'efectivo', 'caja', 'corriente', 'solvencia', 'flujo']):
            categoria = 'liquidez'
        else:
            # An√°lisis m√°s avanzado basado en similitud sem√°ntica
            temas = {
                'endeudamiento': "deudas financiaci√≥n pasivos pr√©stamos cr√©ditos obligaciones financieras apalancamiento",
                'rentabilidad': "beneficios ganancias rentabilidad margen utilidad rendimiento roa roi retorno inversi√≥n",
                'productividad': "empleados trabajadores personal productividad eficiencia rendimiento laboral desempe√±o",
                'cartera': "cartera cobros cr√©ditos clientes facturas cuentas por cobrar cobranza",
                'liquidez': "liquidez efectivo caja flujo dinero solvencia corto plazo disponible"
            }
            
            # Calcular similitud con cada tema
            mejores_similitudes = {}
            for tema, descripcion in temas.items():
                similitud = self.nlp_service.similaridad_textos(mensaje.lower(), descripcion)
                mejores_similitudes[tema] = similitud
            
            # Elegir el tema con mayor similitud si supera un umbral
            mejor_tema = max(mejores_similitudes.items(), key=lambda x: x[1])
            if mejor_tema[1] > 0.1:  # Umbral de similitud
                categoria = mejor_tema[0]
            else:
                categoria = 'general'
        
        # Si hay datos de empresa, personalizar respuesta
        if datos_empresa and 'resultados' in datos_empresa:
            resultados = datos_empresa['resultados']
            
            if categoria == 'endeudamiento':
                ratio = resultados['indicadores']['ratio_endeudamiento']
                evaluacion = resultados['evaluacion']['endeudamiento']
                
                # Respuesta detallada y personalizada
                respuesta = f"### üìä An√°lisis de Endeudamiento\n\nTu ratio de endeudamiento es **{ratio:.2f}**, lo cual es considerado **{evaluacion}** para el sector {resultados['sector']}.\n\n"
                
                # A√±adir interpretaci√≥n seg√∫n el valor
                if ratio < 0.4:
                    respuesta += "Este valor indica un bajo nivel de endeudamiento, lo que es positivo para la estabilidad financiera, pero podr√≠a estar perdiendo oportunidades de apalancamiento para crecer m√°s r√°pido.\n\n"
                elif ratio < 0.6:
                    respuesta += "Este valor muestra un endeudamiento moderado y saludable, un buen balance entre capital propio y ajeno.\n\n"
                else:
                    respuesta += "Este nivel de endeudamiento es elevado, lo que podr√≠a aumentar el riesgo financiero y dificultar el acceso a nuevo financiamiento.\n\n"
                
                # A√±adir recomendaciones espec√≠ficas
                if ratio > 0.6:
                    respuesta += "**Recomendaciones para reducir tu endeudamiento:**\n\n"
                    respuesta += "1. Considera aumentar el capital social o reinvertir beneficios\n"
                    respuesta += "2. Eval√∫a la posibilidad de vender activos no estrat√©gicos\n"
                    respuesta += "3. Establece un plan gradual de reducci√≥n de deuda\n"
                    respuesta += "4. Renegocia condiciones de cr√©dito con tus acreedores\n\n"
                
                return respuesta
            
            # Otras categor√≠as de respuestas seguir√≠an el mismo patr√≥n...
            # (He omitido las otras categor√≠as por brevedad, pero funcionar√≠an similarmente)
            
        # Si no hay datos de empresa o la consulta es general
        # Usar POS tagging para identificar verbos y sustantivos clave
        verbos = [word for word, tag in pos_tags if tag == 'VERB']
        sustantivos = [word for word, tag in pos_tags if tag in ['NOUN', 'PROPN']]
        
        # Personalizaci√≥n b√°sica basada en palabras extra√≠das
        if verbos and sustantivos:
            accion = verbos[0]
            tema = sustantivos[0] if sustantivos else "empresa"
            respuesta = f"Entiendo que quieres {accion} sobre {tema}. "
            respuesta += random.choice(mensajes_predefinidos.get(categoria, mensajes_predefinidos['general']))
            return respuesta
        
        # Si no hay suficiente contexto para personalizar, usar respuesta predefinida
        return random.choice(mensajes_predefinidos.get(categoria, mensajes_predefinidos['general']))
    
    def renderizar_chat(self, datos_empresa=None):
        """
        Renderiza la interfaz del chat.
        
        Args:
            datos_empresa (dict, optional): Datos de la empresa
        """
        st.markdown('<div class="main-title">üí¨ Chat con FinanzGPT</div>', unsafe_allow_html=True)
        
        # Si no hay datos de empresa, mostrar mensaje
        if not datos_empresa:
            st.info("üëã Para obtener respuestas personalizadas sobre tu empresa, primero debes ingresar tus datos financieros en la secci√≥n 'Datos'.")
        
        # Contenedor para el historial de chat
        chat_container = st.container()
        
        # Mostrar historial de chat con estilos mejorados
        with chat_container:
            if not st.session_state.chat_history:
                st.markdown("""
                <div style="text-align: center; margin: 50px 0; color: #888;">
                    <p>üëã ¬°Hola! Soy FinanzGPT, tu asistente financiero.</p>
                    <p>Puedes preguntarme sobre indicadores financieros, recomendaciones para tu empresa, o cualquier duda sobre an√°lisis econ√≥mico.</p>
                    <p>Escribe "ayuda" si necesitas ver un men√∫ de opciones.</p>
                </div>
                """, unsafe_allow_html=True)
            
            for sender, message in st.session_state.chat_history:
                if sender == "user":
                    st.markdown(f"""
                    <div class="chat-message-user">
                        <div class="avatar avatar-user">U</div>
                        <div class="message-content">{message}</div>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    # Convertir marcadores markdown en mensaje HTML
                    # Procesar encabezados
                    message = re.sub(r'### (.*)', r'<h3>\1</h3>', message)
                    # Procesar negritas
                    message = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', message)
                    # Procesar it√°licas
                    message = re.sub(r'\*(.*?)\*', r'<em>\1</em>', message)
                    # Procesar listas con vi√±etas
                    message = re.sub(r'‚Ä¢ (.*)', r'<li>\1</li>', message)
                    message = message.replace('<li>', '<ul><li>').replace('</li>\n\n', '</li></ul>\n\n')
                    
                    st.markdown(f"""
                    <div class="chat-message-bot">
                        <div class="avatar avatar-bot">F</div>
                        <div class="message-content">{message}</div>
                    </div>
                    """, unsafe_allow_html=True)
        
        # Manejar el estado "pensando"
        if st.session_state.thinking:
            st.markdown("""
            <div class="thinking-animation">
                <div class="thinking-dot"></div>
                <div class="thinking-dot"></div>
                <div class="thinking-dot"></div>
            </div>
            """, unsafe_allow_html=True)
        
        # Input para chatbot
        mensaje_usuario = st.chat_input("Escribe tu pregunta aqu√≠...")
        
        if mensaje_usuario:
            # Agregar mensaje del usuario al historial
            st.session_state.chat_history.append(("user", mensaje_usuario))
            
            # Activar animaci√≥n de pensamiento
            st.session_state.thinking = True
            st.rerun()
        
        # Este c√≥digo se ejecuta despu√©s del rerun cuando thinking es True
        if st.session_state.thinking and st.session_state.chat_history:
            # Desactivar el estado "pensando"
            st.session_state.thinking = False
            
            # Obtener la √∫ltima pregunta del usuario
            ultima_pregunta = [msg for sender, msg in st.session_state.chat_history if sender == "user"][-1]
            
            # Generar respuesta del chatbot
            respuesta = self.chatbot_response(ultima_pregunta, datos_empresa)
            
            # Agregar respuesta al historial
            st.session_state.chat_history.append(("bot", respuesta))
            
            # Actualizar chat
            st.rerun()